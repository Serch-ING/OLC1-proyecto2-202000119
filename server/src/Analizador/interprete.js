/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,18],$V1=[1,10],$V2=[1,13],$V3=[1,14],$V4=[1,17],$V5=[1,27],$V6=[1,28],$V7=[1,29],$V8=[1,30],$V9=[1,31],$Va=[1,21],$Vb=[1,22],$Vc=[1,23],$Vd=[1,24],$Ve=[1,26],$Vf=[1,25],$Vg=[1,20],$Vh=[2,5,13,17,20,23,28,29,30,31,32,34,37,38,40,42,43,46,50,52,56],$Vi=[1,56],$Vj=[1,53],$Vk=[1,52],$Vl=[1,43],$Vm=[1,44],$Vn=[1,45],$Vo=[1,46],$Vp=[1,47],$Vq=[1,48],$Vr=[1,49],$Vs=[1,50],$Vt=[1,51],$Vu=[1,54],$Vv=[1,55],$Vw=[1,57],$Vx=[1,58],$Vy=[1,59],$Vz=[1,60],$VA=[17,39],$VB=[1,81],$VC=[1,82],$VD=[1,83],$VE=[1,84],$VF=[1,85],$VG=[1,86],$VH=[1,87],$VI=[1,88],$VJ=[1,89],$VK=[1,90],$VL=[1,91],$VM=[1,92],$VN=[1,93],$VO=[1,94],$VP=[1,95],$VQ=[14,33,36,51,58,59,60,61,62,63,64,65,66,67,68,69,70,71,87],$VR=[14,27,33],$VS=[2,57],$VT=[1,128],$VU=[33,36],$VV=[14,33,36,51,70,71,87],$VW=[14,33,36,51,58,59,64,65,66,67,68,69,70,71,87],$VX=[14,33,36,51,58,59,60,61,64,65,66,67,68,69,70,71,87],$VY=[14,33,36,51,58,59,60,61,62,64,65,66,67,68,69,70,71,87],$VZ=[14,33,36,51,64,65,66,67,68,69,70,71,87],$V_=[1,197],$V$=[1,196],$V01=[40,50,52];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"startwith":8,"writeline":9,"asignacion":10,"sent_if":11,"sent_while":12,"BREAK":13,"PYC":14,"sent_switch":15,"sent_for":16,"ID":17,"DECRE":18,"INCRE":19,"CONTINUE":20,"funciones":21,"llamada":22,"RETURN":23,"e":24,"tipo":25,"lista_ids":26,"IGUAL":27,"INT":28,"DOUBLE":29,"STRING":30,"CHAR":31,"BOOLEAN":32,"COMA":33,"PRINTLN":34,"PARA":35,"PARC":36,"PRINT":37,"IF":38,"LLAVA":39,"LLAVC":40,"ELSE":41,"WHILE":42,"FOR":43,"dec_asig_for":44,"actualizacion_for":45,"SWITCH":46,"caselist":47,"default":48,"caso":49,"CASE":50,"DSPNTS":51,"DEFAULT":52,"lista_params":53,"VOID":54,"lista_vals":55,"RUN":56,"llamadaeee":57,"MAS":58,"MENOS":59,"MULTI":60,"DIV":61,"POT":62,"MOD":63,"MAYORIGUAL":64,"MAYORQUE":65,"MENORIGUAL":66,"MENORQUE":67,"IGUALIGUAL":68,"DIFERENTE":69,"AND":70,"OR":71,"NOT":72,"CASTEODOUBLE":73,"CASTEOINT":74,"CASTEOSTRING":75,"CASTEOCHAR":76,"CASTEOTIPO":77,"CASTEOTOLOWER":78,"CASTEOTOUPPER":79,"LENGTH":80,"DECIMAL":81,"ENTERO":82,"CADENA":83,"CARACTER":84,"TRUE":85,"FALSE":86,"INTERROGACION":87,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"BREAK",14:"PYC",17:"ID",18:"DECRE",19:"INCRE",20:"CONTINUE",23:"RETURN",27:"IGUAL",28:"INT",29:"DOUBLE",30:"STRING",31:"CHAR",32:"BOOLEAN",33:"COMA",34:"PRINTLN",35:"PARA",36:"PARC",37:"PRINT",38:"IF",39:"LLAVA",40:"LLAVC",41:"ELSE",42:"WHILE",43:"FOR",46:"SWITCH",50:"CASE",51:"DSPNTS",52:"DEFAULT",54:"VOID",56:"RUN",58:"MAS",59:"MENOS",60:"MULTI",61:"DIV",62:"POT",63:"MOD",64:"MAYORIGUAL",65:"MAYORQUE",66:"MENORIGUAL",67:"MENORQUE",68:"IGUALIGUAL",69:"DIFERENTE",70:"AND",71:"OR",72:"NOT",73:"CASTEODOUBLE",74:"CASTEOINT",75:"CASTEOSTRING",76:"CASTEOCHAR",77:"CASTEOTIPO",78:"CASTEOTOLOWER",79:"CASTEOTOUPPER",80:"LENGTH",81:"DECIMAL",82:"ENTERO",83:"CADENA",84:"CARACTER",85:"TRUE",86:"FALSE",87:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,2],[6,2],[6,3],[6,1],[7,5],[7,3],[25,1],[25,1],[25,1],[25,1],[25,1],[26,3],[26,1],[9,5],[9,5],[10,4],[11,7],[11,11],[11,9],[12,7],[16,11],[44,4],[44,3],[45,2],[45,2],[45,3],[15,7],[15,8],[15,7],[47,2],[47,1],[49,4],[48,3],[21,9],[21,8],[21,9],[21,8],[53,4],[53,2],[22,4],[22,3],[55,3],[55,1],[8,3],[57,4],[57,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,3],[24,2],[24,2],[24,2],[24,4],[24,2],[24,4],[24,4],[24,4],[24,4],[24,2],[24,3],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,1],[24,5],[24,2],[24,2],[24,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 46:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 29: case 47: case 59:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$ =  $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 11: case 12: case 16: case 98:
 this.$ = $$[$0]; 
break;
case 10:
 this.$ = new detener.default(); 
break;
case 13:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 14:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 15:
 this.$ = new continuar.default(); 
break;
case 17: case 87:
 this.$ = $$[$0-1]; 
break;
case 18:
 this.$ = new retorno.default(null); 
break;
case 19:
 this.$ = new retorno.default($$[$0-1]); 
break;
case 20:
 console.log("Error Sintactico: " + yytext 
                                    + " linea: " + this._$.first_line 
                                    + " columna: " + this._$.first_column); 
                        
                                new errores.default("Sintactico", "No se esperaba el caracter "+ yytext , 
                                                this._$.first_line ,this._$.first_column);            
                            
break;
case 21:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],  _$[$0-4].first_line, _$[$0-4].last_column);
break;
case 22:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 23:
this.$ = new tipo.default("ENTERO"); 
break;
case 24:
this.$ = new tipo.default("DOBLE"); 
break;
case 25:
this.$ = new tipo.default("CADENA"); 
break;
case 26:
this.$ = new tipo.default("CARACTER"); 
break;
case 27:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 28: case 58:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 30:
 this.$ = new writeline.default($$[$0-2],true,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 31:
 this.$ = new writeline.default($$[$0-2],false,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 32:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 33:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 34:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 35:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 36:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);  
break;
case 37:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 38:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],  _$[$0-3].first_line, _$[$0-3].last_column);
break;
case 39: case 42:
 this.$ = new asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 40:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 41:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 43:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 44:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 45:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 48:
 this.$ = new caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 49:
 this.$ = new caso.default(null, $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 50:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-8], $$[$0-6], false, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 51:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-7], [], false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 52:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-8], $$[$0-6], true, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 53:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-7], [], true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 54:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 55:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 56: case 61:
this.$ = new llamada.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 57: case 62:
this.$ = new llamada.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 60:
 this.$ = new startwith.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].last_column );
break;
case 63:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 64:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 65:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 66:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 67:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 68:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 69:
 this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 70:
 this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 71:
 this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 72:
 this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 73:
 this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 74:
 this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 75:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 76:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 77:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 78:
 this.$ = new logica.default($$[$0], '(double)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 79:
 this.$ = new logica.default($$[$0], '(int)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 80:
 this.$ = new logica.default($$[$0-1], '(string)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 81:
 this.$ = new logica.default($$[$0], '(char)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 82:
 this.$ = new logica.default($$[$0-1], '(tipo)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 83:
 this.$ = new logica.default($$[$0-1], '(lower)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 84:
 this.$ = new logica.default($$[$0-1], '(upper)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 85:
 this.$ = new logica.default($$[$0-1], '(length)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 86:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 88:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', _$[$0].first_line, _$[$0].last_column); 
break;
case 89:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', _$[$0].first_line, _$[$0].last_column); 
break;
case 90:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 91:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', _$[$0].first_line, _$[$0].last_column); 
break;
case 92:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].last_column); 
break;
case 93:
 this.$ = new primitivo.default(true, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 94:
 this.$ = new primitivo.default(false, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 95:
 this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 96:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 97:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{1:[3]},{2:$V0,5:[1,32],6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},o($Vh,[2,3]),o($Vh,[2,4]),o($Vh,[2,5]),o($Vh,[2,6]),o($Vh,[2,7]),o($Vh,[2,8]),o($Vh,[2,9]),{14:[1,34]},o($Vh,[2,11]),o($Vh,[2,12]),{18:[1,35],19:[1,36],27:[1,37],35:[1,38]},{14:[1,39]},o($Vh,[2,16]),{14:[1,40]},{14:[1,41],17:$Vi,22:61,24:42,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($Vh,[2,20]),{17:[1,63],26:62},{17:[1,65],57:64},{35:[1,66]},{35:[1,67]},{35:[1,68]},{35:[1,69]},{35:[1,70]},{35:[1,71]},o($VA,[2,23]),o($VA,[2,24]),o($VA,[2,25]),o($VA,[2,26]),o($VA,[2,27]),{1:[2,1]},o($Vh,[2,2]),o($Vh,[2,10]),{14:[1,72]},{14:[1,73]},{17:$Vi,22:61,24:74,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:79,25:78,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,35:$Vj,36:[1,76],53:75,55:77,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($Vh,[2,15]),o($Vh,[2,17]),o($Vh,[2,18]),{14:[1,80],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{17:$Vi,22:61,24:96,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:97,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:98,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{35:[1,99]},{17:$Vi,22:61,24:100,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{35:[1,101]},{35:[1,102]},{35:[1,103]},{35:[1,104]},{17:$Vi,22:61,24:105,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:106,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VQ,[2,88]),o($VQ,[2,89]),o($VQ,[2,90],{18:[1,108],19:[1,107],35:[1,109]}),o($VQ,[2,91]),o($VQ,[2,92]),o($VQ,[2,93]),o($VQ,[2,94]),o($VQ,[2,98]),{14:[1,111],27:[1,110],33:[1,112]},o($VR,[2,29]),{14:[1,113]},{35:[1,114]},{17:$Vi,22:61,24:115,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:116,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:117,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:118,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:119,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:[1,122],25:121,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,44:120},o($Vh,[2,13]),o($Vh,[2,14]),{14:[1,123],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{33:[1,125],36:[1,124]},{14:$VS,51:[1,126]},{33:$VT,36:[1,127]},{17:[1,129]},o($VU,[2,59],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP}),o($Vh,[2,19]),{17:$Vi,22:61,24:130,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:131,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:132,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:133,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:134,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:135,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:136,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:137,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:138,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:139,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:140,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:141,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:142,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:143,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:144,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VV,[2,77],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),o($VV,[2,78],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),o($VV,[2,79],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),{17:$Vi,22:61,24:145,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VV,[2,81],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),{17:$Vi,22:61,24:146,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:147,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:148,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:149,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VQ,[2,86]),{36:[1,150],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},o($VQ,[2,96]),o($VQ,[2,97]),{17:$Vi,22:61,24:79,35:$Vj,36:[1,151],55:77,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:$Vi,22:61,24:152,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($Vh,[2,22]),{17:[1,153]},o($Vh,[2,60]),{17:$Vi,22:61,24:79,35:$Vj,36:[1,155],55:154,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{36:[1,156],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,157],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,158],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,159],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,160],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{14:[1,161]},{17:[1,162]},{27:[1,163]},o($Vh,[2,32]),{51:[1,164]},{25:165,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9},{25:166,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,54:[1,167]},o($VQ,[2,56]),{17:$Vi,22:61,24:168,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VU,[2,55]),o($VW,[2,63],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VW,[2,64],{60:$VD,61:$VE,62:$VF,63:$VG}),o($VX,[2,65],{62:$VF,63:$VG}),o($VX,[2,66],{62:$VF,63:$VG}),o($VY,[2,67],{63:$VG}),o($VY,[2,68],{63:$VG}),o($VZ,[2,69],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,70],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,71],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,72],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,73],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VZ,[2,74],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG}),o($VV,[2,75],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM}),o([14,33,36,51,71,87],[2,76],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN}),{51:[1,169],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,170],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,171],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,172],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,173],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,174],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},o($VQ,[2,87]),o($VQ,$VS),{14:[1,175],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},o($VR,[2,28]),{33:$VT,36:[1,176]},{14:[2,62]},{14:[1,177]},{14:[1,178]},{39:[1,179]},{39:[1,180]},{39:[1,181]},{17:$Vi,22:61,24:182,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{27:[1,183]},{17:$Vi,22:61,24:184,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{25:185,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,54:[1,186]},{17:[1,187]},{39:[1,188]},{39:[1,189]},o($VU,[2,58],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP}),{17:$Vi,22:61,24:190,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($VQ,[2,80]),o($VQ,[2,82]),o($VQ,[2,83]),o($VQ,[2,84]),o($VQ,[2,85]),o($Vh,[2,21]),{14:[2,61]},o($Vh,[2,30]),o($Vh,[2,31]),{2:$V0,4:191,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,4:192,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{47:193,48:194,49:195,50:$V_,52:$V$},{14:[1,198],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{17:$Vi,22:61,24:199,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{14:[2,39],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{39:[1,200]},{39:[1,201]},o($VU,[2,54]),{2:$V0,4:202,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,4:203,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},o([14,33,36,51],[2,95],{58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP}),{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,204],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,205],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{40:[1,206],48:207,49:208,50:$V_,52:$V$},{40:[1,209]},o($V01,[2,47]),{51:[1,210]},{17:$Vi,22:61,24:211,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},{17:[1,213],45:212},{14:[2,38],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{2:$V0,4:214,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,4:215,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,216],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,217],42:$Vd,43:$Ve,46:$Vf,56:$Vg},o($Vh,[2,33],{41:[1,218]}),o($Vh,[2,36]),o($Vh,[2,43]),{40:[1,219]},o($V01,[2,46]),o($Vh,[2,45]),{2:$V0,4:220,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{51:[1,221],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{36:[1,222]},{18:[1,223],19:[1,224],27:[1,225]},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,226],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,227],42:$Vd,43:$Ve,46:$Vf,56:$Vg},o($Vh,[2,51]),o($Vh,[2,53]),{11:229,38:$Vc,39:[1,228]},o($Vh,[2,44]),{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[2,49],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,4:230,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{39:[1,231]},{36:[2,40]},{36:[2,41]},{17:$Vi,22:61,24:232,35:$Vj,59:$Vk,72:$Vl,73:$Vm,74:$Vn,75:$Vo,76:$Vp,77:$Vq,78:$Vr,79:$Vs,80:$Vt,81:$Vu,82:$Vv,83:$Vw,84:$Vx,85:$Vy,86:$Vz},o($Vh,[2,50]),o($Vh,[2,52]),{2:$V0,4:233,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},o($Vh,[2,35]),o($V01,[2,48],{7:4,8:5,9:6,10:7,11:8,12:9,15:11,16:12,21:15,22:16,25:19,6:33,2:$V0,13:$V1,17:$V2,20:$V3,23:$V4,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg}),{2:$V0,4:234,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,42:$Vd,43:$Ve,46:$Vf,56:$Vg},{36:[2,42],58:$VB,59:$VC,60:$VD,61:$VE,62:$VF,63:$VG,64:$VH,65:$VI,66:$VJ,67:$VK,68:$VL,69:$VM,70:$VN,71:$VO,87:$VP},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,235],42:$Vd,43:$Ve,46:$Vf,56:$Vg},{2:$V0,6:33,7:4,8:5,9:6,10:7,11:8,12:9,13:$V1,15:11,16:12,17:$V2,20:$V3,21:15,22:16,23:$V4,25:19,28:$V5,29:$V6,30:$V7,31:$V8,32:$V9,34:$Va,37:$Vb,38:$Vc,40:[1,236],42:$Vd,43:$Ve,46:$Vf,56:$Vg},o($Vh,[2,34]),o($Vh,[2,37])],
defaultActions: {32:[2,1],155:[2,62],176:[2,61],223:[2,40],224:[2,41]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const evaluar = require('../Interprete/Evaluar');
        const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
        const primitivo = require('../Interprete/Expresiones/Primitivo');

        const writeline = require('../Interprete/Instrucciones/WriteLine')
        const declaracion = require('../Interprete/Instrucciones/Declaracion')
        const ast = require('../Interprete/Ast/Ast')
        const tipo = require('../Interprete/TablaSimbolos/Tipo')
        const identificador = require('../Interprete/Expresiones/Identificador')

        const relacional = require('../Interprete/Expresiones/Operaciones/Relacional');
        const logica = require('../Interprete/Expresiones/Operaciones/Logica');

        const asignacion = require('../Interprete/Instrucciones/Asignacion');
        const Ifs = require('../Interprete/Instrucciones/SentenciasControl/Ifs');
        const While = require('../Interprete/Instrucciones/SentenciasCiclica/While');
        const ternario = require('../Interprete/Expresiones/Ternario');
        const detener = require('../Interprete/Instrucciones/SentenciasTransferencia/Break');

        const Switch = require('../Interprete/Instrucciones/SentenciasControl/Switch');
        const caso = require('../Interprete/Instrucciones/SentenciasControl/Caso'); 
        const For = require('../Interprete/Instrucciones/SentenciasCiclica/For');

        const continuar = require('../Interprete/Instrucciones/SentenciasTransferencia/Continue');

        const funcion = require('../Interprete/Instrucciones/Funcion');
        const llamada = require('../Interprete/Instrucciones/Llamada');
        const startwith = require('../Interprete/Instrucciones/StartWith');
        const simbolo = require('../Interprete/TablaSimbolos/Simbolo')
        const retorno = require('../Interprete/Instrucciones/SentenciasTransferencia/Return');

        const errores = require('../Interprete/Ast/Errores')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 74
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 73
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 75
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 76
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 77
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 78
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 79
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 80
break;
case 10: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 11: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 12: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 35 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 'CORA' 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 'CORC' 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 14 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 27 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 33 
break;
case 22: console.log("Reconocio : "+ yy_.yytext); return 39
break;
case 23: console.log("Reconocio : "+ yy_.yytext); return 40
break;
case 24: console.log("Reconocio : "+ yy_.yytext); return 87
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 26: console.log("Reconocio : " + yy_.yytext);  return 58 
break;
case 27: console.log("Reconocio : " + yy_.yytext);  return 60 
break;
case 28: console.log("Reconocio : " + yy_.yytext);  return 61 
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 59 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 63 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 62 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 64 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 65 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 'EVALUAR' 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 85 
break;
case 42: console.log("Reconocio : " + yy_.yytext);  return 86 
break;
case 43: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 44: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 45: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 46: console.log("Reconocio : " + yy_.yytext);  return 31 
break;
case 47: console.log("Reconocio : " + yy_.yytext);  return 32 
break;
case 48: console.log("Reconocio : " + yy_.yytext);  return 'WRITELINE' 
break;
case 49: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 50: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 51: console.log("Reconocio : "+ yy_.yytext); return 38
break;
case 52: console.log("Reconocio : "+ yy_.yytext); return 42
break;
case 53: console.log("Reconocio : "+ yy_.yytext); return 41
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 13
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 43
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 'TOSTRING'
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 'TOUPPER'
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 52
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 20
break;
case 62: console.log("Reconocio : "+ yy_.yytext); return 56
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 64: console.log("Reconocio : "+ yy_.yytext); return 23
break;
case 65: console.log("Reconocio : " + yy_.yytext);  return 81 
break;
case 66: console.log("Reconocio : " + yy_.yytext);  return 82 
break;
case 67: console.log("Reconocio : " + yy_.yytext);  return 17 
break;
case 68: console.log("Reconocio : " + yy_.yytext);  return 83 
break;
case 69: console.log("Reconocio : " + yy_.yytext);  return 84 
break;
case 70:
break;
case 71:
break;
case 72:
break;
case 73:
break;
case 74:return 5
break;
case 75: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));

                        new errores.default('Lexico', 'El caracter ' + yy_.yytext 
                                + ' no forma parte del lenguaje', 
                                yy_.yylineno+1, 
                                yy_.yylloc.last_column+1); 
                                      
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:\(int\))/i,/^(?:\(double\))/i,/^(?:toString\b)/i,/^(?:\(char\))/i,/^(?:typeOf\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:==)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}