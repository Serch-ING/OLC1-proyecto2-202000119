/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var interprete = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,19],$V1=[1,11],$V2=[1,14],$V3=[1,15],$V4=[1,18],$V5=[1,29],$V6=[1,30],$V7=[1,31],$V8=[1,32],$V9=[1,33],$Va=[1,22],$Vb=[1,23],$Vc=[1,24],$Vd=[1,25],$Ve=[1,26],$Vf=[1,28],$Vg=[1,27],$Vh=[1,21],$Vi=[2,5,14,18,21,24,36,37,38,39,40,41,44,45,47,49,50,51,54,58,60,64],$Vj=[1,61],$Vk=[1,58],$Vl=[1,57],$Vm=[1,46],$Vn=[1,47],$Vo=[1,48],$Vp=[1,49],$Vq=[1,50],$Vr=[1,51],$Vs=[1,52],$Vt=[1,53],$Vu=[1,54],$Vv=[1,55],$Vw=[1,56],$Vx=[1,59],$Vy=[1,60],$Vz=[1,62],$VA=[1,63],$VB=[1,64],$VC=[1,65],$VD=[1,69],$VE=[18,29,46],$VF=[1,89],$VG=[1,90],$VH=[1,91],$VI=[1,92],$VJ=[1,93],$VK=[1,94],$VL=[1,95],$VM=[1,96],$VN=[1,97],$VO=[1,98],$VP=[1,99],$VQ=[1,100],$VR=[1,101],$VS=[1,102],$VT=[1,103],$VU=[15,30,34,43,59,66,67,68,69,70,71,72,73,74,75,76,77,78,79,97],$VV=[1,124],$VW=[15,28,29,34],$VX=[2,72],$VY=[1,143],$VZ=[34,43],$V_=[15,30,34,43,59,78,79,97],$V$=[15,30,34,43,59,66,67,72,73,74,75,76,77,78,79,97],$V01=[15,30,34,43,59,66,67,68,69,72,73,74,75,76,77,78,79,97],$V11=[15,30,34,43,59,66,67,68,69,70,72,73,74,75,76,77,78,79,97],$V21=[15,30,34,43,59,72,73,74,75,76,77,78,79,97],$V31=[1,242],$V41=[1,241],$V51=[47,58,60],$V61=[1,323],$V71=[30,34];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"inicio":3,"instrucciones":4,"EOF":5,"instruccion":6,"declaracion":7,"startwith":8,"writeline":9,"asignacion":10,"sent_if":11,"sent_while":12,"sent_Dowhile":13,"BREAK":14,"PYC":15,"sent_switch":16,"sent_for":17,"ID":18,"DECRE":19,"INCRE":20,"CONTINUE":21,"funciones":22,"llamada":23,"RETURN":24,"e":25,"tipo":26,"lista_ids":27,"IGUAL":28,"CORA":29,"CORC":30,"NEW":31,"listasimpleCORC":32,"doublearray":33,"COMA":34,"listasimple":35,"INT":36,"DOUBLE":37,"STRING":38,"CHAR":39,"BOOLEAN":40,"PRINTLN":41,"PARA":42,"PARC":43,"PRINT":44,"IF":45,"LLAVA":46,"LLAVC":47,"ELSE":48,"WHILE":49,"DO":50,"FOR":51,"dec_asig_for":52,"actualizacion_for":53,"SWITCH":54,"caselist":55,"default":56,"caso":57,"CASE":58,"DSPNTS":59,"DEFAULT":60,"lista_params":61,"VOID":62,"lista_vals":63,"RUN":64,"llamadaeee":65,"MAS":66,"MENOS":67,"MULTI":68,"DIV":69,"POT":70,"MOD":71,"MAYORIGUAL":72,"MAYORQUE":73,"MENORIGUAL":74,"MENORQUE":75,"IGUALIGUAL":76,"DIFERENTE":77,"AND":78,"OR":79,"NOT":80,"CASTEODOUBLE":81,"CASTEOINT":82,"CASTEOSTRING":83,"CASTEOCHAR":84,"CASTEOTIPO":85,"CASTEOTOLOWER":86,"CASTEOTOUPPER":87,"LENGTH":88,"CHARARRAY":89,"ROUND":90,"DECIMAL":91,"ENTERO":92,"CADENA":93,"CARACTER":94,"TRUE":95,"FALSE":96,"INTERROGACION":97,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"BREAK",15:"PYC",18:"ID",19:"DECRE",20:"INCRE",21:"CONTINUE",24:"RETURN",28:"IGUAL",29:"CORA",30:"CORC",31:"NEW",32:"listasimpleCORC",34:"COMA",36:"INT",37:"DOUBLE",38:"STRING",39:"CHAR",40:"BOOLEAN",41:"PRINTLN",42:"PARA",43:"PARC",44:"PRINT",45:"IF",46:"LLAVA",47:"LLAVC",48:"ELSE",49:"WHILE",50:"DO",51:"FOR",54:"SWITCH",58:"CASE",59:"DSPNTS",60:"DEFAULT",62:"VOID",64:"RUN",66:"MAS",67:"MENOS",68:"MULTI",69:"DIV",70:"POT",71:"MOD",72:"MAYORIGUAL",73:"MAYORQUE",74:"MENORIGUAL",75:"MENORQUE",76:"IGUALIGUAL",77:"DIFERENTE",78:"AND",79:"OR",80:"NOT",81:"CASTEODOUBLE",82:"CASTEOINT",83:"CASTEOSTRING",84:"CASTEOCHAR",85:"CASTEOTIPO",86:"CASTEOTOLOWER",87:"CASTEOTOUPPER",88:"LENGTH",89:"CHARARRAY",90:"ROUND",91:"DECIMAL",92:"ENTERO",93:"CADENA",94:"CARACTER",95:"TRUE",96:"FALSE",97:"INTERROGACION"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,1],[6,2],[6,1],[6,1],[6,3],[6,3],[6,2],[6,1],[6,2],[6,2],[6,3],[6,1],[7,5],[7,3],[7,11],[7,9],[7,16],[7,7],[7,13],[33,5],[33,3],[35,3],[35,1],[26,1],[26,1],[26,1],[26,1],[26,1],[27,3],[27,1],[9,5],[9,5],[10,4],[10,7],[10,10],[11,7],[11,11],[11,9],[12,7],[13,9],[17,11],[52,4],[52,3],[53,2],[53,2],[53,3],[16,7],[16,8],[16,7],[55,2],[55,1],[57,4],[56,3],[22,9],[22,8],[22,9],[22,8],[61,4],[61,2],[61,4],[61,6],[23,4],[23,3],[63,3],[63,1],[8,3],[65,4],[65,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,3],[25,2],[25,2],[25,2],[25,4],[25,2],[25,4],[25,4],[25,4],[25,4],[25,4],[25,4],[25,2],[25,3],[25,1],[25,1],[25,1],[25,4],[25,7],[25,1],[25,1],[25,1],[25,1],[25,5],[25,2],[25,2],[25,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 this.$ = new ast.default($$[$0-1]); return this.$ 
break;
case 2: case 59:
 this.$ = $$[$0-1]; this.$.push($$[$0]); 
break;
case 3: case 39: case 60: case 74:
 this.$ = new Array(); this.$.push($$[$0]); 
break;
case 4:
 this.$ =  $$[$0]; 
break;
case 5: case 6: case 7: case 8: case 9: case 10: case 12: case 13: case 17: case 117:
 this.$ = $$[$0]; 
break;
case 11:
 this.$ = new detener.default(); 
break;
case 14:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 15:
 this.$ = new asignacion.default($$[$0-2], new aritmetica.default(new identificador.default($$[$0-2], _$[$0-2].first_line, _$[$0-2].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-2].first_line, _$[$0-2].last_column), _$[$0-2].first_line, _$[$0-2].last_column, false),_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 16:
 this.$ = new continuar.default(); 
break;
case 18: case 104:
 this.$ = $$[$0-1]; 
break;
case 19:
 this.$ = new retorno.default(null); 
break;
case 20:
 this.$ = new retorno.default($$[$0-1]); 
break;
case 21:
 console.log("Error Sintactico: " + yytext 
                                    + " linea: " + this._$.first_line 
                                    + " columna: " + this._$.first_column); 
                        
                                new errores.default("Sintactico", "No se esperaba el caracter "+ yytext , 
                                                this._$.first_line ,this._$.first_column);            
                            
break;
case 22:
 this.$ = new declaracion.default($$[$0-4], $$[$0-3], $$[$0-1],_$[$0-4].first_line, _$[$0-4].last_column);
break;
case 23:
 this.$ = new declaracion.default($$[$0-2], $$[$0-1], null,  _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 24:
 this.$ = new declaracion.default($$[$0-10], $$[$0-9], null,  _$[$0-10].first_line, _$[$0-10].last_column,$$[$0-4],$$[$0-2]);
break;
case 25:
 this.$ = new declaracion.default($$[$0-8], $$[$0-7], null,  _$[$0-8].first_line, _$[$0-8].last_column,$$[$0-8],$$[$0-5]);
break;
case 26:
 this.$ = new declaracion.default($$[$0-15], $$[$0-14], null,  _$[$0-15].first_line, _$[$0-15].last_column);
break;
case 27:
 this.$ = new declaracion.default($$[$0-6], $$[$0-3], $$[$0-1],  _$[$0-6].first_line, _$[$0-6].last_column);
break;
case 28:
 this.$ = new declaracion.default($$[$0-12], $$[$0-11], null,  _$[$0-12].first_line, _$[$0-12].last_column,$$[$0-12],$$[$0-9],$$[$0-6],$$[$0-2]);
break;
case 29:
 this.$ = $$[$0-4]; this.$.push($$[$0-1]);
break;
case 30:
this.$= new Array(); this.$.push($$[$0-1]);
break;
case 31:
 this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 32:
this.$= new Array(); this.$.push($$[$0]);
break;
case 33:
this.$ = new tipo.default("ENTERO"); 
break;
case 34:
this.$ = new tipo.default("DOBLE"); 
break;
case 35:
this.$ = new tipo.default("CADENA"); 
break;
case 36:
this.$ = new tipo.default("CARACTER"); 
break;
case 37:
this.$ = new tipo.default("BOOLEANO"); 
break;
case 38: case 73:
 this.$ = $$[$0-2]; this.$.push($$[$0]); 
break;
case 40:
 this.$ = new writeline.default($$[$0-2],true,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 41:
 this.$ = new writeline.default($$[$0-2],false,_$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 42:
 this.$ = new asignacion.default($$[$0-3], $$[$0-1], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 43:
 this.$ = new asignacion.default($$[$0-6], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column,$$[$0-4]); 
break;
case 44:
 this.$ = new asignacion.default($$[$0-9], $$[$0-1], _$[$0-9].first_line, _$[$0-9].last_column,$$[$0-7],$$[$0-4]); 
break;
case 45:
 this.$ = new Ifs.default($$[$0-4], $$[$0-1], [], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 46:
 this.$ = new Ifs.default($$[$0-8], $$[$0-5], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 47:
 this.$ = new Ifs.default($$[$0-6], $$[$0-3], [$$[$0]], _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 48:
 this.$ = new While.default($$[$0-4], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column);  
break;
case 49:
 this.$ = new DoWhile.default($$[$0-2], $$[$0-6], _$[$0-8].first_line, _$[$0-8].last_column);  
break;
case 50:
 this.$ = new For.default($$[$0-8], $$[$0-6], $$[$0-4], $$[$0-1], _$[$0-10].first_line, _$[$0-10].last_column); 
break;
case 51:
 this.$ = new declaracion.default($$[$0-3], $$[$0-2], $$[$0],  _$[$0-3].first_line, _$[$0-3].last_column);
break;
case 52: case 55:
 this.$ = new asignacion.default($$[$0-2], $$[$0], _$[$0-2].first_line, _$[$0-2].last_column); 
break;
case 53:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 54:
 this.$ = new asignacion.default($$[$0-1], new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false),_$[$0-1].first_line, _$[$0-1].last_column ); 
break;
case 56:
 this.$ = new Switch.default($$[$0-4], $$[$0-1], null, _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 57:
 this.$ = new Switch.default($$[$0-5], $$[$0-2], $$[$0-1], _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 58:
 this.$ = new Switch.default($$[$0-4], [], $$[$0-1], _$[$0-6].first_line, _$[$0-6].last_column); 
break;
case 61:
 this.$ = new caso.default($$[$0-2], $$[$0], _$[$0-3].first_line, _$[$0-3].last_column); 
break;
case 62:
 this.$ = new caso.default(null, $$[$0], _$[$0-2].first_line, _$[$0-2].last_column);
break;
case 63:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-8], $$[$0-6], false, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 64:
 this.$ = new funcion.default(2, $$[$0-3], $$[$0-7], [], false, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 65:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-8], $$[$0-6], true, $$[$0-1],  _$[$0-8].first_line, _$[$0-8].last_column); 
break;
case 66:
 this.$ = new funcion.default(3, $$[$0-3], $$[$0-7], [], true, $$[$0-1],  _$[$0-7].first_line, _$[$0-7].last_column); 
break;
case 67:
 this.$ = $$[$0-3]; this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 68:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-1], $$[$0], null)); 
break;
case 69:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-3], $$[$0], null)); 
break;
case 70:
 this.$ = new Array(); this.$.push(new simbolo.default(6, $$[$0-5], $$[$0], null)); 
break;
case 71: case 76:
this.$ = new llamada.default($$[$0-3], $$[$0-1],_$[$0-3].first_line, _$[$0-3].last_column ); 
break;
case 72: case 77:
this.$ = new llamada.default($$[$0-2], [] ,_$[$0-2].first_line, _$[$0-2].last_column ); 
break;
case 75:
 this.$ = new startwith.default($$[$0-1],_$[$0-2].first_line, _$[$0-2].last_column );
break;
case 78:
 this.$ = new aritmetica.default($$[$0-2], '+', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 79:
 this.$ = new aritmetica.default($$[$0-2], '-', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 80:
 this.$ = new aritmetica.default($$[$0-2], '*', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 81:
 this.$ = new aritmetica.default($$[$0-2], '/', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 82:
 this.$ = new aritmetica.default($$[$0-2], '^', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 83:
 this.$ = new aritmetica.default($$[$0-2], '%', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 84:
 this.$ = new relacional.default($$[$0-2], '>=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 85:
 this.$ = new relacional.default($$[$0-2], '>', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 86:
 this.$ = new relacional.default($$[$0-2], '<=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 87:
 this.$ = new relacional.default($$[$0-2], '<', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 88:
 this.$ = new relacional.default($$[$0-2], '==', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 89:
 this.$ = new relacional.default($$[$0-2], '!=', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 90:
 this.$ = new logica.default($$[$0-2], '&&', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 91:
 this.$ = new logica.default($$[$0-2], '||', $$[$0], _$[$0-2].first_line, _$[$0-2].last_column,false); 
break;
case 92:
 this.$ = new logica.default($$[$0], '!', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 93:
 this.$ = new logica.default($$[$0], '(double)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 94:
 this.$ = new logica.default($$[$0], '(int)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 95:
 this.$ = new logica.default($$[$0-1], '(string)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 96:
 this.$ = new logica.default($$[$0], '(char)', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 97:
 this.$ = new logica.default($$[$0-1], '(tipo)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 98:
 this.$ = new logica.default($$[$0-1], '(lower)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 99:
 this.$ = new logica.default($$[$0-1], '(upper)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 100:
 this.$ = new logica.default($$[$0-1], '(length)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 101:
 this.$ = new logica.default($$[$0-1], '(chararray)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 102:
 this.$ = new logica.default($$[$0-1], '(round)', null, _$[$0-3].first_line, _$[$0-3].last_column,true); 
break;
case 103:
 this.$ = new aritmetica.default($$[$0], 'UNARIO', null, _$[$0-1].first_line, _$[$0-1].last_column,true); 
break;
case 105:
 this.$ = new primitivo.default(Number($$[$0]), 'DOBLE', _$[$0].first_line, _$[$0].last_column); 
break;
case 106:
 this.$ = new primitivo.default(Number($$[$0]), 'ENTERO', _$[$0].first_line, _$[$0].last_column); 
break;
case 107:
 this.$ = new identificador.default($$[$0], _$[$0].first_line, _$[$0].last_column); 
break;
case 108:
 this.$ = new identificador.default($$[$0-3], _$[$0-3].first_line, _$[$0-3].last_column,$$[$0-1]); 
break;
case 109:
 this.$ = new identificador.default($$[$0-6], _$[$0-6].first_line, _$[$0-6],$$[$0-4],$$[$0-1]); 
break;
case 110:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CADENA', _$[$0].first_line, _$[$0].last_column); 
break;
case 111:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new primitivo.default($$[$0], 'CARACTER', _$[$0].first_line, _$[$0].last_column); 
break;
case 112:
 this.$ = new primitivo.default(true, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 113:
 this.$ = new primitivo.default(false, 'BOOLEANO', _$[$0].first_line, _$[$0].last_column); 
break;
case 114:
 this.$ = new ternario.default($$[$0-4], $$[$0-2], $$[$0], _$[$0-4].first_line, _$[$0-4].last_column); 
break;
case 115:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '+', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
case 116:
 this.$ = new aritmetica.default(new identificador.default($$[$0-1], _$[$0-1].first_line, _$[$0-1].last_column), '-', new primitivo.default(1, 'ENTERO', _$[$0-1].first_line, _$[$0-1].last_column), _$[$0-1].first_line, _$[$0-1].last_column, false); 
break;
}
},
table: [{2:$V0,3:1,4:2,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{1:[3]},{2:$V0,5:[1,34],6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},o($Vi,[2,3]),o($Vi,[2,4]),o($Vi,[2,5]),o($Vi,[2,6]),o($Vi,[2,7]),o($Vi,[2,8]),o($Vi,[2,9]),o($Vi,[2,10]),{15:[1,36]},o($Vi,[2,12]),o($Vi,[2,13]),{19:[1,37],20:[1,38],28:[1,39],29:[1,40],42:[1,41]},{15:[1,42]},o($Vi,[2,17]),{15:[1,43]},{15:[1,44],18:$Vj,23:66,25:45,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vi,[2,21]),{18:$VD,27:67,29:[1,68]},{18:[1,71],65:70},{42:[1,72]},{42:[1,73]},{42:[1,74]},{42:[1,75]},{46:[1,76]},{42:[1,77]},{42:[1,78]},o($VE,[2,33]),o($VE,[2,34]),o($VE,[2,35]),o($VE,[2,36]),o($VE,[2,37]),{1:[2,1]},o($Vi,[2,2]),o($Vi,[2,11]),{15:[1,79]},{15:[1,80]},{18:$Vj,23:66,25:81,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:82,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:87,26:86,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,42:$Vk,43:[1,84],61:83,63:85,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vi,[2,16]),o($Vi,[2,18]),o($Vi,[2,19]),{15:[1,88],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{18:$Vj,23:66,25:104,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:105,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:106,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{42:[1,107]},{18:$Vj,23:66,25:108,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{42:[1,109]},{42:[1,110]},{42:[1,111]},{42:[1,112]},{42:[1,113]},{42:[1,114]},{18:$Vj,23:66,25:115,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:116,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VU,[2,105]),o($VU,[2,106]),o($VU,[2,107],{19:[1,119],20:[1,118],29:[1,117],42:[1,120]}),o($VU,[2,110]),o($VU,[2,111]),o($VU,[2,112]),o($VU,[2,113]),o($VU,[2,117]),{15:[1,122],28:[1,121],29:[1,123],34:$VV},{30:[1,125]},o($VW,[2,39]),{15:[1,126]},{42:[1,127]},{18:$Vj,23:66,25:128,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:129,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:130,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:131,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{2:$V0,4:132,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{18:$Vj,23:66,25:133,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:[1,136],26:135,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,52:134},o($Vi,[2,14]),o($Vi,[2,15]),{15:[1,137],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{30:[1,138],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{34:[1,140],43:[1,139]},{15:$VX,59:[1,141]},{34:$VY,43:[1,142]},{18:[1,144],29:[1,145]},o($VZ,[2,74],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT}),o($Vi,[2,20]),{18:$Vj,23:66,25:146,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:147,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:148,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:149,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:150,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:151,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:152,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:153,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:154,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:155,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:156,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:157,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:158,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:159,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:160,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($V_,[2,92],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),o($V_,[2,93],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),o($V_,[2,94],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),{18:$Vj,23:66,25:161,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($V_,[2,96],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),{18:$Vj,23:66,25:162,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:163,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:164,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:165,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:166,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:167,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VU,[2,103]),{43:[1,168],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{18:$Vj,23:66,25:169,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VU,[2,115]),o($VU,[2,116]),{18:$Vj,23:66,25:87,42:$Vk,43:[1,170],63:85,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:171,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vi,[2,23]),{18:$Vj,23:66,25:173,30:[1,172],42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:[1,174]},{18:$VD,27:175},o($Vi,[2,75]),{18:$Vj,23:66,25:87,42:$Vk,43:[1,177],63:176,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{43:[1,178],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,179],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,180],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,181],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,182],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{43:[1,183],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{15:[1,184]},{18:[1,185]},{28:[1,186]},o($Vi,[2,42]),{28:[1,187],29:[1,188]},{59:[1,189]},{26:190,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},{26:191,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,62:[1,192]},o($VU,[2,71]),{18:$Vj,23:66,25:193,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VZ,[2,68]),{30:[1,194]},o($V$,[2,78],{68:$VH,69:$VI,70:$VJ,71:$VK}),o($V$,[2,79],{68:$VH,69:$VI,70:$VJ,71:$VK}),o($V01,[2,80],{70:$VJ,71:$VK}),o($V01,[2,81],{70:$VJ,71:$VK}),o($V11,[2,82],{71:$VK}),o($V11,[2,83],{71:$VK}),o($V21,[2,84],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V21,[2,85],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V21,[2,86],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V21,[2,87],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V21,[2,88],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V21,[2,89],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK}),o($V_,[2,90],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ}),o([15,30,34,43,59,79,97],[2,91],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR}),{59:[1,195],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,196],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,197],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,198],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,199],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,200],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,201],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,202],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($VU,[2,104]),{30:[1,203],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($VU,$VX),{15:[1,204],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{28:[1,205],29:[1,206]},{30:[1,207],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($VW,[2,38]),{28:[1,208],34:$VV},{34:$VY,43:[1,209]},{15:[2,77]},{15:[1,210]},{15:[1,211]},{46:[1,212]},{46:[1,213]},{49:[1,214]},{46:[1,215]},{18:$Vj,23:66,25:216,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{28:[1,217]},{18:$Vj,23:66,25:218,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:219,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:$Vj,23:66,25:220,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{26:221,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,62:[1,222]},{18:[1,223]},{46:[1,224]},{46:[1,225]},o($VZ,[2,73],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT}),{18:[1,226],29:[1,227]},{18:$Vj,23:66,25:228,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($VU,[2,95]),o($VU,[2,97]),o($VU,[2,98]),o($VU,[2,99]),o($VU,[2,100]),o($VU,[2,101]),o($VU,[2,102]),o($VU,[2,108],{29:[1,229]}),o($Vi,[2,22]),{31:[1,230]},{30:[1,231]},{28:[1,232],29:[1,233]},{18:$Vj,23:66,25:234,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{15:[2,76]},o($Vi,[2,40]),o($Vi,[2,41]),{2:$V0,4:235,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,4:236,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{42:[1,237]},{55:238,56:239,57:240,58:$V31,60:$V41},{15:[1,243],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{18:$Vj,23:66,25:244,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{15:[2,52],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{15:[1,245],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{30:[1,246],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{46:[1,247]},{46:[1,248]},o($VZ,[2,67]),{2:$V0,4:249,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,4:250,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},o($VZ,[2,69]),{30:[1,251]},o([15,30,34,43,59],[2,114],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT}),{18:$Vj,23:66,25:252,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{26:253,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},{28:[1,254]},{29:[1,255]},{18:$Vj,23:66,25:256,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{15:[1,257],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,258],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,259],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{18:$Vj,23:66,25:260,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{47:[1,261],56:262,57:263,58:$V31,60:$V41},{47:[1,264]},o($V51,[2,60]),{59:[1,265]},{18:$Vj,23:66,25:266,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{18:[1,268],53:267},{15:[2,51],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($Vi,[2,43]),{28:[1,269]},{2:$V0,4:270,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,4:271,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,272],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,273],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{18:[1,274]},{30:[1,275],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{29:[1,276]},{31:[1,277]},{32:[1,278]},{30:[1,279],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($Vi,[2,27]),o($Vi,[2,45],{48:[1,280]}),o($Vi,[2,48]),{43:[1,281],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($Vi,[2,56]),{47:[1,282]},o($V51,[2,59]),o($Vi,[2,58]),{2:$V0,4:283,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{59:[1,284],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{43:[1,285]},{19:[1,286],20:[1,287],28:[1,288]},{18:$Vj,23:66,25:289,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,290],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,291],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},o($Vi,[2,64]),o($Vi,[2,66]),o($VZ,[2,70]),o($VU,[2,109]),{18:$Vj,23:66,25:292,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{26:293,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9},{15:[1,294]},{28:[1,295]},{11:297,45:$Vc,46:[1,296]},{15:[1,298]},o($Vi,[2,57]),{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[2,62],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,4:299,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{46:[1,300]},{43:[2,53]},{43:[2,54]},{18:$Vj,23:66,25:301,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{15:[1,302],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($Vi,[2,63]),o($Vi,[2,65]),{30:[1,303],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{29:[1,304]},o($Vi,[2,25]),{29:[1,305]},{2:$V0,4:306,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},o($Vi,[2,47]),o($Vi,[2,49]),o($V51,[2,61],{7:4,8:5,9:6,10:7,11:8,12:9,13:10,16:12,17:13,22:16,23:17,26:20,6:35,2:$V0,14:$V1,18:$V2,21:$V3,24:$V4,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh}),{2:$V0,4:307,6:3,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{43:[2,55],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},o($Vi,[2,44]),{15:[1,308]},{18:$Vj,23:66,25:309,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{29:[1,311],33:310},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,312],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},{2:$V0,6:35,7:4,8:5,9:6,10:7,11:8,12:9,13:10,14:$V1,16:12,17:13,18:$V2,21:$V3,22:16,23:17,24:$V4,26:20,36:$V5,37:$V6,38:$V7,39:$V8,40:$V9,41:$Va,44:$Vb,45:$Vc,47:[1,313],49:$Vd,50:$Ve,51:$Vf,54:$Vg,64:$Vh},o($Vi,[2,24]),{30:[1,314],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{30:[1,315],34:[1,316]},{18:$Vj,23:66,25:318,35:317,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vi,[2,46]),o($Vi,[2,50]),{29:[1,319]},{15:[1,320]},{29:[1,321]},{30:[1,322],34:$V61},o($V71,[2,32],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT}),{18:$Vj,23:66,25:324,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($Vi,[2,28]),{18:$Vj,23:66,25:318,35:325,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},o($V71,[2,30]),{18:$Vj,23:66,25:326,42:$Vk,67:$Vl,80:$Vm,81:$Vn,82:$Vo,83:$Vp,84:$Vq,85:$Vr,86:$Vs,87:$Vt,88:$Vu,89:$Vv,90:$Vw,91:$Vx,92:$Vy,93:$Vz,94:$VA,95:$VB,96:$VC},{30:[1,327],66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT},{30:[1,328],34:$V61},o($V71,[2,31],{66:$VF,67:$VG,68:$VH,69:$VI,70:$VJ,71:$VK,72:$VL,73:$VM,74:$VN,75:$VO,76:$VP,77:$VQ,78:$VR,79:$VS,97:$VT}),{15:[1,329]},o($V71,[2,29]),o($Vi,[2,26])],
defaultActions: {34:[2,1],177:[2,77],209:[2,76],286:[2,53],287:[2,54]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse (input) {
    var self = this,
        stack = [0],
        tstack = [], // token stack
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    var args = lstack.slice.call(arguments, 1);

    //this.reductionCount = this.shiftCount = 0;

    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    // copy state
    for (var k in this.yy) {
      if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
        sharedState.yy[k] = this.yy[k];
      }
    }

    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);

    var ranges = lexer.options && lexer.options.ranges;

    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }

    function popStack (n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

_token_stack:
    var lex = function () {
        var token;
        token = lexer.lex() || EOF;
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length - 1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

_handle_error:
        // handle parse error
        if (typeof action === 'undefined' || !action.length || !action[0]) {
            var error_rule_depth;
            var errStr = '';

            // Return the rule stack depth where the nearest error rule can be found.
            // Return FALSE when no error recovery rule was found.
            function locateNearestErrorRecoveryRule(state) {
                var stack_probe = stack.length - 1;
                var depth = 0;

                // try to recover from error
                for(;;) {
                    // check for error recovery rule in this state
                    if ((TERROR.toString()) in table[state]) {
                        return depth;
                    }
                    if (state === 0 || stack_probe < 2) {
                        return false; // No suitable error recovery rule available.
                    }
                    stack_probe -= 2; // popStack(1): [symbol, action]
                    state = stack[stack_probe];
                    ++depth;
                }
            }

            if (!recovering) {
                // first see if there's any chance at hitting an error recovery rule:
                error_rule_depth = locateNearestErrorRecoveryRule(state);

                // Report error
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push("'"+this.terminals_[p]+"'");
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == EOF ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected,
                    recoverable: (error_rule_depth !== false)
                });
            } else if (preErrorSymbol !== EOF) {
                error_rule_depth = locateNearestErrorRecoveryRule(state);
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol === EOF || preErrorSymbol === EOF) {
                    throw new Error(errStr || 'Parsing halted while starting to recover from another error.');
                }

                // discard current lookahead and grab another
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            if (error_rule_depth === false) {
                throw new Error(errStr || 'Parsing halted. No suitable error recovery rule available.');
            }
            popStack(error_rule_depth);

            preErrorSymbol = (symbol == TERROR ? null : symbol); // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {
            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(lexer.yytext);
                lstack.push(lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = lexer.yyleng;
                    yytext = lexer.yytext;
                    yylineno = lexer.yylineno;
                    yyloc = lexer.yylloc;
                    if (recovering > 0) {
                        recovering--;
                    }
                } else {
                    // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2:
                // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.apply(yyval, [yytext, yyleng, yylineno, sharedState.yy, action[1], vstack, lstack].concat(args));

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3:
                // accept
                return true;
        }

    }

    return true;
}};

        const evaluar = require('../Interprete/Evaluar');
        const aritmetica = require('../Interprete/Expresiones/Operaciones/Aritmetica');
        const primitivo = require('../Interprete/Expresiones/Primitivo');

        const writeline = require('../Interprete/Instrucciones/WriteLine')
        const declaracion = require('../Interprete/Instrucciones/Declaracion')
        const ast = require('../Interprete/Ast/Ast')
        const tipo = require('../Interprete/TablaSimbolos/Tipo')
        const identificador = require('../Interprete/Expresiones/Identificador')

        const relacional = require('../Interprete/Expresiones/Operaciones/Relacional');
        const logica = require('../Interprete/Expresiones/Operaciones/Logica');

        const asignacion = require('../Interprete/Instrucciones/Asignacion');
        const Ifs = require('../Interprete/Instrucciones/SentenciasControl/Ifs');
        const While = require('../Interprete/Instrucciones/SentenciasCiclica/While');
        const DoWhile = require('../Interprete/Instrucciones/SentenciasCiclica/DoWhile');
        const ternario = require('../Interprete/Expresiones/Ternario');
        const detener = require('../Interprete/Instrucciones/SentenciasTransferencia/Break');

        const Switch = require('../Interprete/Instrucciones/SentenciasControl/Switch');
        const caso = require('../Interprete/Instrucciones/SentenciasControl/Caso'); 
        const For = require('../Interprete/Instrucciones/SentenciasCiclica/For');

        const continuar = require('../Interprete/Instrucciones/SentenciasTransferencia/Continue');

        const funcion = require('../Interprete/Instrucciones/Funcion');
        const llamada = require('../Interprete/Instrucciones/Llamada');
        const startwith = require('../Interprete/Instrucciones/StartWith');
        const simbolo = require('../Interprete/TablaSimbolos/Simbolo')
        const retorno = require('../Interprete/Instrucciones/SentenciasTransferencia/Return');

        const errores = require('../Interprete/Ast/Errores')
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/*Ignoramos los comentarios simples*/
break;
case 1:/*Ignorar comentarios con multiples lneas*/
break;
case 2: console.log("Reconocio : "+ yy_.yytext); return 89
break;
case 3: console.log("Reconocio : "+ yy_.yytext); return 31
break;
case 4: console.log("Reconocio : "+ yy_.yytext); return 82
break;
case 5: console.log("Reconocio : "+ yy_.yytext); return 81
break;
case 6: console.log("Reconocio : "+ yy_.yytext); return 83
break;
case 7: console.log("Reconocio : "+ yy_.yytext); return 84
break;
case 8: console.log("Reconocio : "+ yy_.yytext); return 85
break;
case 9: console.log("Reconocio : "+ yy_.yytext); return 86
break;
case 10: console.log("Reconocio : "+ yy_.yytext); return 87
break;
case 11: console.log("Reconocio : "+ yy_.yytext); return 88
break;
case 12: console.log("Reconocio : "+ yy_.yytext); return 90
break;
case 13: console.log("Reconocio : " + yy_.yytext);  return 19 
break;
case 14: console.log("Reconocio : " + yy_.yytext);  return 20 
break;
case 15: console.log("Reconocio : " + yy_.yytext);  return 76 
break;
case 16: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 17: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 18: console.log("Reconocio : " + yy_.yytext);  return 42 
break;
case 19: console.log("Reconocio : " + yy_.yytext);  return 43 
break;
case 20: console.log("Reconocio : " + yy_.yytext);  return 29 
break;
case 21: console.log("Reconocio : " + yy_.yytext);  return 30 
break;
case 22: console.log("Reconocio : " + yy_.yytext);  return 15 
break;
case 23: console.log("Reconocio : " + yy_.yytext);  return 28 
break;
case 24: console.log("Reconocio : " + yy_.yytext);  return 34 
break;
case 25: console.log("Reconocio : "+ yy_.yytext); return 46
break;
case 26: console.log("Reconocio : "+ yy_.yytext); return 47
break;
case 27: console.log("Reconocio : "+ yy_.yytext); return 97
break;
case 28: console.log("Reconocio : "+ yy_.yytext); return 59
break;
case 29: console.log("Reconocio : " + yy_.yytext);  return 66 
break;
case 30: console.log("Reconocio : " + yy_.yytext);  return 68 
break;
case 31: console.log("Reconocio : " + yy_.yytext);  return 69 
break;
case 32: console.log("Reconocio : " + yy_.yytext);  return 67 
break;
case 33: console.log("Reconocio : " + yy_.yytext);  return 71 
break;
case 34: console.log("Reconocio : " + yy_.yytext);  return 70 
break;
case 35: console.log("Reconocio : " + yy_.yytext);  return 72 
break;
case 36: console.log("Reconocio : " + yy_.yytext);  return 73 
break;
case 37: console.log("Reconocio : " + yy_.yytext);  return 74 
break;
case 38: console.log("Reconocio : " + yy_.yytext);  return 75 
break;
case 39: console.log("Reconocio : " + yy_.yytext);  return 77 
break;
case 40: console.log("Reconocio : " + yy_.yytext);  return 78 
break;
case 41: console.log("Reconocio : " + yy_.yytext);  return 79 
break;
case 42: console.log("Reconocio : " + yy_.yytext);  return 80 
break;
case 43: console.log("Reconocio : " + yy_.yytext);  return 'EVALUAR' 
break;
case 44: console.log("Reconocio : " + yy_.yytext);  return 95 
break;
case 45: console.log("Reconocio : " + yy_.yytext);  return 96 
break;
case 46: console.log("Reconocio : " + yy_.yytext);  return 36 
break;
case 47: console.log("Reconocio : " + yy_.yytext);  return 37 
break;
case 48: console.log("Reconocio : " + yy_.yytext);  return 38 
break;
case 49: console.log("Reconocio : " + yy_.yytext);  return 39 
break;
case 50: console.log("Reconocio : " + yy_.yytext);  return 40 
break;
case 51: console.log("Reconocio : " + yy_.yytext);  return 'WRITELINE' 
break;
case 52: console.log("Reconocio : " + yy_.yytext);  return 44 
break;
case 53: console.log("Reconocio : " + yy_.yytext);  return 41 
break;
case 54: console.log("Reconocio : "+ yy_.yytext); return 45
break;
case 55: console.log("Reconocio : "+ yy_.yytext); return 49
break;
case 56: console.log("Reconocio : "+ yy_.yytext); return 50
break;
case 57: console.log("Reconocio : "+ yy_.yytext); return 48
break;
case 58: console.log("Reconocio : "+ yy_.yytext); return 14
break;
case 59: console.log("Reconocio : "+ yy_.yytext); return 51
break;
case 60: console.log("Reconocio : "+ yy_.yytext); return 54
break;
case 61: console.log("Reconocio : "+ yy_.yytext); return 58
break;
case 62: console.log("Reconocio : "+ yy_.yytext); return 'TOSTRING'
break;
case 63: console.log("Reconocio : "+ yy_.yytext); return 'TOUPPER'
break;
case 64: console.log("Reconocio : "+ yy_.yytext); return 60
break;
case 65: console.log("Reconocio : "+ yy_.yytext); return 21
break;
case 66: console.log("Reconocio : "+ yy_.yytext); return 64
break;
case 67: console.log("Reconocio : "+ yy_.yytext); return 62
break;
case 68: console.log("Reconocio : "+ yy_.yytext); return 24
break;
case 69: console.log("Reconocio : " + yy_.yytext);  return 91 
break;
case 70: console.log("Reconocio : " + yy_.yytext);  return 92 
break;
case 71: console.log("Reconocio : " + yy_.yytext);  return 18 
break;
case 72: console.log("Reconocio : " + yy_.yytext);  return 93 
break;
case 73: console.log("Reconocio : " + yy_.yytext);  return 94 
break;
case 74:
break;
case 75:
break;
case 76:
break;
case 77:
break;
case 78:return 5
break;
case 79: console.log("Error Lexico "+yy_.yytext
                        +" linea "+yy_.yylineno
                        +" columna "+(yy_.yylloc.last_column+1));

                        new errores.default('Lexico', 'El caracter ' + yy_.yytext 
                                + ' no forma parte del lenguaje', 
                                yy_.yylineno+1, 
                                yy_.yylloc.last_column+1); 
                                      
                        
break;
}
},
rules: [/^(?:\/\/.*)/i,/^(?:\/\*((\*+[^/*])|([^*]))*\**\*\/)/i,/^(?:tocharArray\b)/i,/^(?:new\b)/i,/^(?:\(int\))/i,/^(?:\(double\))/i,/^(?:toString\b)/i,/^(?:\(char\))/i,/^(?:typeOf\b)/i,/^(?:toLower\b)/i,/^(?:toUpper\b)/i,/^(?:length\b)/i,/^(?:round\b)/i,/^(?:--)/i,/^(?:\+\+)/i,/^(?:==)/i,/^(?:\^)/i,/^(?:%)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:;)/i,/^(?:=)/i,/^(?:,)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:\?)/i,/^(?::)/i,/^(?:\+)/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:-)/i,/^(?:%)/i,/^(?:\^)/i,/^(?:>=)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:<)/i,/^(?:!=)/i,/^(?:&&)/i,/^(?:\|\|)/i,/^(?:!)/i,/^(?:evaluar\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:int\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:writeline\b)/i,/^(?:print\b)/i,/^(?:println\b)/i,/^(?:if\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:else\b)/i,/^(?:break\b)/i,/^(?:for\b)/i,/^(?:switch\b)/i,/^(?:case\b)/i,/^(?:tostring\b)/i,/^(?:toupper\b)/i,/^(?:default\b)/i,/^(?:continue\b)/i,/^(?:run\b)/i,/^(?:void\b)/i,/^(?:return\b)/i,/^(?:[0-9]+(\.[0-9]+)\b)/i,/^(?:([0-9]+))/i,/^(?:([a-zñA-ZÑ][a-zñA-ZÑ0-9_]*))/i,/^(?:(("((\\([\'\"\\ntr]))|([^\"\\]))*")))/i,/^(?:(('((\\([\'\"\\ntr]))|([^\'\\]))')))/i,/^(?:[\s\r\n\t])/i,/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[/][*][^*]*[*]+([^/*][^*]*[*]+)*[/])/i,/^(?:$)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = interprete;
exports.Parser = interprete.Parser;
exports.parse = function () { return interprete.parse.apply(interprete, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}